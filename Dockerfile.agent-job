# Dockerfile for Agent Deployment Job (Cloud Run Jobs)
FROM python:3.12-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app

# Install system dependencies including gcloud CLI (using gcloud builds instead of docker)
RUN apt-get update && apt-get install -y \
    curl \
    gcc \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release \
    && curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg \
    && echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \
    && apt-get update && apt-get install -y google-cloud-cli \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r jobuser && useradd -r -g jobuser jobuser

WORKDIR /app

# Copy requirements and install dependencies
COPY agent-launcher/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Set up directory structure that deploy-ai-agent.sh expects (Alchemist-v1 root structure)
# Copy and install shared libraries first for better caching
COPY shared /app/shared
RUN cd /app/shared && pip install -e .

# Copy agent-launcher directory (includes deploy_job.py and deploy_agent_with_progress.py)
COPY agent-launcher /app/agent-launcher

# Copy deployment script to root (deploy-ai-agent.sh expects to run from root)
COPY deploy-ai-agent.sh /app/
RUN chmod +x /app/deploy-ai-agent.sh

# Copy Dockerfile.agent-template, cloudbuild config, and dockerignore for agent deployments
COPY Dockerfile.agent-template /app/Dockerfile.agent-template
COPY cloudbuild.agent-template.yaml /app/cloudbuild.agent-template.yaml
COPY .dockerignore.agent-template /app/.dockerignore.agent-template

# Copy the job script to the working directory
COPY agent-launcher/deploy_job.py /app/

# Set up gcloud configuration for Cloud Run Jobs  
ENV CLOUDSDK_CONFIG=/tmp/gcloud_config
ENV TMPDIR=/tmp
ENV HOME=/tmp

# Create writable directories for gcloud
RUN mkdir -p /tmp/gcloud_config /tmp/.config/gcloud /tmp/.cache && \
    chmod -R 777 /tmp

# Set ownership (keeping /tmp permissions as set above)
RUN chown -R jobuser:jobuser /app

# Switch to non-root user
USER jobuser

# Default command - will be overridden by Cloud Run Jobs
CMD ["python", "deploy_job.py"]
